==================================================================================================
SQLTraveler(byval riSource as rowIdentifier, 
			byval getDerivatives as bool, 
			byval shouldReturnFK as bool) as rowIdentifier
==================================================================================================
	Initialiser une variable riRetour à null
	Construire requête SELECT pour la riSource
	Récupérer les lignes riSourceLines
	Obtenir de la cache les FK de la table
		
	Si shouldReturnFK == true && lignes.count > 1
		throw new exception("La clef n'est pas unique!");
		
	Pour chaque ligne dans riSourceLines
        //Si ligne déjà enregistrée
		Si la PK de la ligne est dans keyRelationshipDictionnary
			Si shouldReturnFK == true
				Retourner la PK destination 
			else
				next ligne
		Sinon		
			Dupliquer la ligne pour l'enregistrement dans destination dans une variable lineDestination
			Pour chaque contrainte de type FK			
				Si la FK est dans keyRelationshipDictionnary
					Utiliser la clef depuis keyRelationshipDictionnary			
				Sinon
					Si la table de destination de la FK est statique
						Construire requête SELECT pour la ligne table destination
						Récupérer la ligne
						Si une ligne existe	dans destination	
                            Ajouter la liggne dans keyRelationshipDictionnary
							Affecter la valeur des colonnes PK à celles de lineDestination (FK)
						Sinon
							Créer une rowIdentifier ri avec la valeur des colonnes de la contrainte FK
							Appeler SQLTraveler(ri, false, true)
							Affecter la valeur des colonnes à celles de lineDestination
					Sinon
						Créer une rowIdentifier ri avec la valeur des colonnes de la contrainte FK
						Appeler SQLTraveler(ri, false, true)
						Affecter la valeur des colonnes à celles de lineDestination

            Récupérer les colonnes qui doivent être générées depuis la configuration dataBuilder 
            Pour chaque colonne à générer
                Appeler la fonction attachée à la colonne
                Affecter la valeur de retour dans lineDestination
                        
			Créer la requête d'INSERT avec les valeurs de lineDestination
			Enregistrer la ligne dans la table destination
			Récupérer la PK nouvellement créée
			Enregistrer la PK dans keyRelationshipDictionnary
            Si shouldReturnFK == true
                Affecter riRetour avec la valeur des colonnes de la PK
			
            Obtenir de la cache les tables dérivées de riSource (contraintes FK qui pointent vers la PK de la table riSource) derivativeTable
            //Supprimer les tables qui sont dans derivativeTableAccess avec l'access denied --Fait lors de la création de la cache
            //Ajouter l'acces aux tables dérivées dans l'objet derivativeTable --Fait lors de la création de la cache
            Si getDerivatives == false
                Filtrer derivativeTable avec seulement les tables qui ont l'accès Forced
			//Sinon, toutes les tables de la cache suivront le processus normal   
            
            Pour chaque table dans derivativeTable
                Si table.Access == Forced et table.Cascade == true
                    getDerivatives = true            
                Créer une rowIdentifier ri avec la valeur des colonnes de la contrainte (PK)
                Appeler SQLTraveler(ri, getDerivatives, false)

=========================================================================	
BuildCache()
=========================================================================
	Création des FK par table
		Obtenir le schéma des tables avec leur FK
		Supprimer les FK reliées à des tables statiques
        
        
        
        
        
